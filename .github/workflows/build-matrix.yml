name: Build Matrix

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrixInclude: ${{ steps.gen.outputs.matrixInclude }}
    steps:
      - id: gen
        run: |
          # Define the services as a multi-line string
          SERVICES="elixir:elixir/Dockerfile
          go:go/Dockerfile
          node:node/Dockerfile
          python:python/Dockerfile
          rust:rust/Dockerfile"
          
          # Convert the services to JSON array
          # jq pipeline explanation:
          # 1. -R -s: Read input as raw strings and treat as single string
          # 2. split("\n"): Split the multi-line string into array of lines
          # 3. map(select(length > 0)): Filter out empty lines
          # 4. map(strip): Remove leading/trailing whitespace from each line
          # 5. map(split(":")): Split each line on colon into [name, path] arrays
          # 6. map({...}): Transform each [name, path] into JSON object with containerName and dockerfilePath
          # 7. -c: Output compact JSON (single line, no formatting)
          JSON=$(echo "$SERVICES" | jq -R -s -c 'split("\n") | map(select(length > 0)) | map(strip) | map(split(":")) | map({"containerName": .[0], "dockerfilePath": .[1]})')
          echo "matrixInclude=$JSON" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrixInclude) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for ${{ matrix.containerName }}
      run: |
        docker build -t ${{ matrix.containerName }} -f ${{ matrix.dockerfilePath }} .

    - name: Start container on port 8080
      run: |
        docker run -d --name ${{ matrix.containerName }}-container -p 8080:8080 ${{ matrix.containerName }}

    - name: Wait for container to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8080/ > /dev/null 2>&1; do sleep 2; done' || true

    - name: Test endpoint with cURL
      run: |
        # Capture both response body and status code in one request
        response=$(curl -s -w "%{http_code}" http://localhost:8080/)

        # Parse response: last 3 characters are the status code, rest is body
        response_code="${response: -3}"
        response_body="${response%???}"

        # Get only the first line and strip newlines to prevent markdown table formatting issues
        response_body_clean=$(echo "$response_body" | head -n 1 | tr -d '\n\r')

        echo "HTTP response code: $response_code"
        echo "HTTP response body: $response_body_clean"

        # Store test results in artifacts for summary job
        mkdir -p test-results
        echo "${{ matrix.containerName }},${{ matrix.dockerfilePath }},$response_code,$response_body_clean" > test-results/${{ matrix.containerName }}.csv

        if [ "$response_code" -eq 200 ]; then
          echo "✅ Test passed: Received HTTP 200 from /"
        else
          echo "❌ Test failed: Expected HTTP 200, got $response_code"
          exit 1
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.containerName }}
        path: test-results/
        retention-days: 1

    - name: Cleanup container
      if: always()
      run: |
        docker stop ${{ matrix.containerName }}-container || true
        docker rm ${{ matrix.containerName }}-container || true

  summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        path: all-results
        merge-multiple: true

    - name: Create combined summary
      run: |
        echo "# 🚀 Container Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Container Name | Dockerfile Path | Status Code | Response Body | Test Result |" >> $GITHUB_STEP_SUMMARY
        echo "|----------------|-----------------|-------------|---------------|-------------|" >> $GITHUB_STEP_SUMMARY

        for file in all-results/*.csv; do
          if [ -f "$file" ]; then
            IFS=',' read -r container dockerfile_path status_code response_body < "$file"
            if [ "$status_code" -eq 200 ]; then
              result="✅ PASSED"
            else
              result="❌ FAILED"
            fi
            echo "| **$container** | \`$dockerfile_path\` | \`$status_code\` | \`$response_body\` | $result |" >> $GITHUB_STEP_SUMMARY
          fi
        done

        echo "" >> $GITHUB_STEP_SUMMARY
