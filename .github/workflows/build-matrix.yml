name: Build Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  packages: write
  contents: read
  attestations: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrixInclude: ${{ steps.gen.outputs.matrixInclude }}
    steps:
      - id: gen
        env:
          SERVICES: |
            hello-world-elixir:elixir/Dockerfile
            hello-world-go:go/Dockerfile
            hello-world-node:node/Dockerfile
            hello-world-python:python/Dockerfile
            hello-world-rust:rust/Dockerfile
        run: |
          # Convert the services to JSON array
          # jq pipeline explanation:
          # 1. -R -s: Read input as raw strings and treat as single string
          # 2. split("\n"): Split the multi-line string into array of lines
          # 3. map(select(length > 0)): Filter out empty lines
          # 4. map(gsub("^\\s+|\\s+$"; "")): Remove leading/trailing whitespace (strip equivalent)
          # 5. map(split(":")): Split each line on colon into [name, path] arrays
          # 6. map({...}): Transform each [name, path] into JSON object with containerName and dockerfilePath
          # 7. -c: Output compact JSON (single line, no formatting)
          JSON=$(echo "$SERVICES" | jq -R -s -c 'split("\n") | map(select(length > 0)) | map(gsub("^\\s+|\\s+$"; "")) | map(split(":")) | map({"containerName": .[0], "dockerfilePath": .[1]})')
          echo "matrixInclude=$JSON" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrixInclude) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # Enable experimental features for better SBOM support
        buildkitd-config-inline: |
          [worker.oci]
            enabled = true
          [worker.containerd]
            enabled = true

    - name: Log in to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        tags: |
          type=raw,value=latest
          type=sha

    - name: Build Docker image for testing
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfilePath }}
        platforms: linux/amd64
        push: false
        load: true  # Load image into local Docker daemon for testing
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Start container on port 8080
      run: |
        # Use the first tag from metadata for local testing (since image is loaded with tags, not digest)
        LOCAL_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        docker run -d --name ${{ matrix.containerName }}-container -p 8080:8080 "$LOCAL_TAG"

    - name: Wait for container to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8080/ > /dev/null 2>&1; do sleep 2; done' || true

    - name: Test endpoint with cURL
      run: |
        # Capture both response body and status code in one request
        response=$(curl -s -w "%{http_code}" http://localhost:8080/)

        # Parse response: last 3 characters are the status code, rest is body
        response_code="${response: -3}"
        response_body="${response%???}"

        # Get only the first line and strip newlines to prevent markdown table formatting issues
        response_body_clean=$(echo "$response_body" | head -n 1 | tr -d '\n\r')

        echo "HTTP response code: $response_code"
        echo "HTTP response body: $response_body_clean"

        # Store test results in artifacts for summary job
        mkdir -p test-results
        echo "${{ matrix.containerName }},${{ matrix.dockerfilePath }},$response_code,$response_body_clean" > test-results/${{ matrix.containerName }}.csv

        if [ "$response_code" -eq 200 ]; then
          echo "‚úÖ Test passed: Received HTTP 200 from /"
          echo "TEST_PASSED=true" >> $GITHUB_ENV
        else
          echo "‚ùå Test failed: Expected HTTP 200, got $response_code"
          echo "TEST_PASSED=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Generate comprehensive SBOMs
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "üìã Generating SBOMs with multiple tools..."
        
        # Install Microsoft sbom-tool for source code analysis
        echo "üîß Installing Microsoft sbom-tool..."
        curl -Lo sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
        chmod +x sbom-tool
        
        # Create output directory
        mkdir -p sbom-output
        
        # Extract directory from dockerfile path
        DOCKERFILE_DIR=$(dirname "${{ matrix.dockerfilePath }}")
        
        echo "üîç Generating source code SBOM for $DOCKERFILE_DIR..."
        
        # Generate SBOM for source code dependencies
        ./sbom-tool generate \
          -b "$DOCKERFILE_DIR" \
          -bc "$DOCKERFILE_DIR" \
          -pn "${{ matrix.containerName }}" \
          -pv "sha-${{ github.sha }}" \
          -ps "${{ github.repository_owner }}" \
          -nsb "https://github.com/${{ github.repository_owner }}" \
          -mi SPDX:2.2 \
          -m sbom-output \
          -V Warning || {
            echo "‚ö†Ô∏è  SBOM generation completed with warnings (normal for simple apps)"
            # Create minimal SBOM if none generated
            if [ ! -f "sbom-output/_manifest/spdx_2.2/manifest.spdx.json" ]; then
              mkdir -p sbom-output/_manifest/spdx_2.2
              cat > sbom-output/_manifest/spdx_2.2/manifest.spdx.json << EOF
        {
          "spdxVersion": "SPDX-2.2",
          "dataLicense": "CC0-1.0",
          "SPDXID": "SPDXRef-DOCUMENT",
          "name": "${{ matrix.containerName }}",
          "documentNamespace": "https://github.com/${{ github.repository_owner }}/${{ matrix.containerName }}/sha-${{ github.sha }}",
          "creationInfo": {
            "created": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "creators": ["Tool: Microsoft.Sbom.Tool"]
          },
          "packages": [],
          "relationships": []
        }
        EOF
            fi
          }
        
        # Copy for attestation
        cp sbom-output/_manifest/spdx_2.2/manifest.spdx.json microsoft-sbom.spdx.json
        
        SOURCE_PACKAGES=$(jq -r '.packages | length' microsoft-sbom.spdx.json 2>/dev/null || echo "0")
        echo "‚úÖ Source code SBOM: $SOURCE_PACKAGES packages"
        
        # Note: Container SBOM will be generated during build step
        echo "‚è≥ Container SBOM will be generated during image build..."

    - name: Build and push image with attestations
      id: build-push
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "üî® Building and pushing image with comprehensive attestations..."
        
        # Build with both push and SBOM generation
        docker buildx build \
          --platform linux/amd64 \
          --file "${{ matrix.dockerfilePath }}" \
          --push \
          --provenance=true \
          --sbom=true \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --output type=image,push=true \
          --output type=sbom,dest=./buildkit-sbom.spdx.json \
          $(echo "${{ steps.meta.outputs.tags }}" | sed 's/^/--tag /') \
          $(echo "${{ steps.meta.outputs.labels }}" | sed 's/^/--label /') \
          .
          
        # Capture the image digest for attestations
        IMAGE_DIGEST=$(docker buildx imagetools inspect "$(echo "${{ steps.meta.outputs.tags }}" | head -n1)" --format '{{ .Manifest.Digest }}')
        echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV
        echo "‚úÖ Image built and pushed with digest: $IMAGE_DIGEST"

    - name: Generate attestations
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "üîê Generating security attestations for ${{ matrix.containerName }}..."
        echo "   ‚Üí Build provenance attestation"
        echo "   ‚Üí SBOM attestation"
        echo "   (Individual attestation outputs suppressed - see combined summary)"

    - name: Generate GitHub artifact attestation
      id: build-attestation
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        subject-digest: ${{ env.IMAGE_DIGEST }}
        push-to-registry: true
        show-summary: false
      env:
        ACTIONS_STEP_DEBUG: false
        RUNNER_DEBUG: 0

    - name: Generate Microsoft SBOM attestation
      id: microsoft-sbom-attestation
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/attest-sbom@v2
      with:
        subject-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        subject-digest: ${{ env.IMAGE_DIGEST }}
        sbom-path: microsoft-sbom.spdx.json
        push-to-registry: true
        show-summary: false
      env:
        ACTIONS_STEP_DEBUG: false
        RUNNER_DEBUG: 0

    - name: Validate and attest SBOMs
      id: validate-sboms
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "üîç Validating generated SBOMs..."
        
        # Check BuildKit SBOM
        if [ -f "buildkit-sbom.spdx.json" ]; then
          if jq -e '.spdxVersion and .packages and (.packages | length > 0)' buildkit-sbom.spdx.json >/dev/null 2>&1; then
            container_packages=$(jq -r '.packages | length' buildkit-sbom.spdx.json)
            echo "‚úÖ Container SBOM: $container_packages packages (includes all layers)"
            echo "BUILDKIT_SBOM_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è  Container SBOM has no packages (simple app)"
            echo "BUILDKIT_SBOM_AVAILABLE=false" >> $GITHUB_ENV
          fi
        else
          echo "‚ö†Ô∏è  No container SBOM generated"
          echo "BUILDKIT_SBOM_AVAILABLE=false" >> $GITHUB_ENV
        fi
        
        # Create summary for artifacts
        source_packages=$(jq -r '.packages | length' microsoft-sbom.spdx.json 2>/dev/null || echo "0")
        container_packages=${container_packages:-0}
        
        echo "SBOM Summary for ${{ matrix.containerName }}" > sbom-summary.txt
        echo "Source dependencies: $source_packages packages" >> sbom-summary.txt
        echo "Container layers: $container_packages packages" >> sbom-summary.txt

    - name: Attest BuildKit SBOM
      id: buildkit-sbom-attest
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main' && env.BUILDKIT_SBOM_AVAILABLE == 'true'
      uses: actions/attest-sbom@v2
      with:
        subject-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        subject-digest: ${{ env.IMAGE_DIGEST }}
        sbom-path: buildkit-sbom.spdx.json
        push-to-registry: true
        show-summary: false
      env:
        ACTIONS_STEP_DEBUG: false
        RUNNER_DEBUG: 0

    - name: Store attestation results
      if: always() && env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "üìù Storing attestation results for summary..."
        mkdir -p attestation-results
        
        # Check if attestations were successful and capture URLs
        build_status="‚ùå Failed"
        microsoft_sbom_status="‚ùå Failed"
        buildkit_sbom_status="‚ùå Not Available"
        build_url=""
        microsoft_sbom_url=""
        buildkit_sbom_url=""
        
        if [[ "${{ steps.build-attestation.outcome }}" == "success" ]]; then
          build_status="‚úÖ Signed"
          build_url="${{ steps.build-attestation.outputs.attestation-url }}"
        fi
        
        if [[ "${{ steps.microsoft-sbom-attestation.outcome }}" == "success" ]]; then
          microsoft_sbom_status="‚úÖ Signed"
          microsoft_sbom_url="${{ steps.microsoft-sbom-attestation.outputs.attestation-url }}"
        fi
        
        if [[ "${{ steps.buildkit-sbom-attest.outcome }}" == "success" ]]; then
          buildkit_sbom_status="‚úÖ Signed"
          buildkit_sbom_url="${{ steps.buildkit-sbom-attest.outputs.attestation-url }}"
        elif [[ "$BUILDKIT_SBOM_AVAILABLE" == "false" ]]; then
          buildkit_sbom_status="‚ö†Ô∏è  No Data"
        fi
        
        echo "${{ matrix.containerName }},${{ matrix.dockerfilePath }},${{ env.IMAGE_DIGEST }},$build_status,$microsoft_sbom_status,$buildkit_sbom_status,$build_url,$microsoft_sbom_url,$buildkit_sbom_url" > attestation-results/${{ matrix.containerName }}.csv
        echo "‚úÖ Attestation results stored for ${{ matrix.containerName }}"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.containerName }}
        path: test-results/
        retention-days: 1

    - name: Upload attestation results
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: attestation-results-${{ matrix.containerName }}
        path: attestation-results/
        retention-days: 1

    - name: Upload SBOM artifacts
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files-${{ matrix.containerName }}
        path: |
          microsoft-sbom.spdx.json
          buildkit-sbom.spdx.json
          sbom-summary.txt
        retention-days: 30

    - name: Cleanup container
      if: always()
      run: |
        docker stop ${{ matrix.containerName }}-container || true
        docker rm ${{ matrix.containerName }}-container || true

  summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        path: all-results
        merge-multiple: true

    - name: Download all attestation results
      uses: actions/download-artifact@v4
      with:
        pattern: attestation-results-*
        path: all-attestations
        merge-multiple: true

    - name: Download all SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: sbom-files-*
        path: all-sboms
        merge-multiple: true

    - name: Create combined summary
      run: |
        echo "# üöÄ Container Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Container Name | Dockerfile Path | Status Code | Response Body | Test Result |" >> $GITHUB_STEP_SUMMARY
        echo "|----------------|-----------------|-------------|---------------|-------------|" >> $GITHUB_STEP_SUMMARY

        for file in all-results/*.csv; do
          if [ -f "$file" ]; then
            IFS=',' read -r container dockerfile_path status_code response_body < "$file"
            if [ "$status_code" -eq 200 ]; then
              result="‚úÖ PASSED"
            else
              result="‚ùå FAILED"
            fi
            echo "| **$container** | \`$dockerfile_path\` | \`$status_code\` | \`$response_body\` | $result |" >> $GITHUB_STEP_SUMMARY
          fi
        done

        echo "" >> $GITHUB_STEP_SUMMARY

        # Add registry push information for main builds
        if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
          echo "## üì¶ Published Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following images were pushed to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in all-results/*.csv; do
            if [ -f "$file" ]; then
              IFS=',' read -r container dockerfile_path status_code response_body < "$file"
              if [ "$status_code" -eq 200 ]; then
                echo "- üì¶ \`ghcr.io/${{ github.repository_owner }}/$container:latest\`" >> $GITHUB_STEP_SUMMARY
                echo "- üì¶ \`ghcr.io/${{ github.repository_owner }}/$container:sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> üí° **Pull images:** \`docker pull ghcr.io/${{ github.repository_owner }}/IMAGE_NAME:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add comprehensive attestations summary
          echo "## üîê Security Attestations Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "all-attestations" ] && [ "$(ls -A all-attestations 2>/dev/null)" ]; then
            echo "| Container | Dockerfile | Image Digest | Build Provenance | Microsoft SBOM | BuildKit SBOM | Verification |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|------------|-------------|------------------|----------------|---------------|--------------|" >> $GITHUB_STEP_SUMMARY
            
            for file in all-attestations/*.csv; do
              if [ -f "$file" ]; then
                IFS=',' read -r container dockerfile_path digest build_status microsoft_sbom_status buildkit_sbom_status build_url microsoft_sbom_url buildkit_sbom_url < "$file"
                short_digest="${digest#sha256:}"
                short_digest="${short_digest:0:12}"
                
                # Create hyperlinked status for build provenance
                if [[ "$build_status" == "‚úÖ Signed" && -n "$build_url" ]]; then
                  build_display="[‚úÖ Signed]($build_url)"
                else
                  build_display="$build_status"
                fi
                
                # Create hyperlinked status for Microsoft SBOM
                if [[ "$microsoft_sbom_status" == "‚úÖ Signed" && -n "$microsoft_sbom_url" ]]; then
                  microsoft_sbom_display="[‚úÖ Signed]($microsoft_sbom_url)"
                else
                  microsoft_sbom_display="$microsoft_sbom_status"
                fi
                
                # Create hyperlinked status for BuildKit SBOM
                if [[ "$buildkit_sbom_status" == "‚úÖ Signed" && -n "$buildkit_sbom_url" ]]; then
                  buildkit_sbom_display="[‚úÖ Signed]($buildkit_sbom_url)"
                else
                  buildkit_sbom_display="$buildkit_sbom_status"
                fi
                
                echo "| **$container** | \`$dockerfile_path\` | \`$short_digest...\` | $build_display | $microsoft_sbom_display | $buildkit_sbom_display | \`gh attestation verify oci://ghcr.io/${{ github.repository_owner }}/$container:latest\` |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üõ°Ô∏è Attestation Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All published images include comprehensive supply chain security attestations:" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Provenance**: GitHub artifact attestations establishing build source and environment" >> $GITHUB_STEP_SUMMARY
            echo "- **Source SBOM**: Software Bill of Materials for source code dependencies (Microsoft sbom-tool)" >> $GITHUB_STEP_SUMMARY
            echo "- **Container SBOM**: Software Bill of Materials for all container layers (BuildKit)" >> $GITHUB_STEP_SUMMARY
            echo "- **Docker Attestations**: Native Docker BuildKit provenance and SBOM" >> $GITHUB_STEP_SUMMARY
            echo "- **SLSA Compliance**: Meets SLSA v1.0 Build Level 2 requirements" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> **Note**: Container SBOM attestations include all layers and are only generated when the container has package dependencies. Simple applications may only have source SBOMs." >> $GITHUB_STEP_SUMMARY
          else
            echo "No attestations were generated (likely due to test failures or non-main branch)." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add comprehensive SBOM analysis
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Software Bill of Materials (SBOM) Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "all-sboms" ] && [ "$(ls -A all-sboms 2>/dev/null)" ]; then
            echo "Comprehensive SBOM analysis covering both source dependencies and container layers:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Create a summary table of SBOM counts by container
            echo "| Container | Source Dependencies | Container Layers | App Type | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|---------------------|------------------|----------|--------|" >> $GITHUB_STEP_SUMMARY
            
            # Process each container's SBOM data
            for result_file in all-results/*.csv; do
              if [ -f "$result_file" ]; then
                IFS=',' read -r container dockerfile_path status_code response_body < "$result_file"
                if [ "$status_code" -eq 200 ]; then
                  
                  # Count source code SBOM packages
                  source_count="0"
                  microsoft_sbom_file="all-sboms/microsoft-sbom.spdx.json"
                  if [ -f "$microsoft_sbom_file" ]; then
                    source_count=$(cat "$microsoft_sbom_file" | jq -r '.packages | length' 2>/dev/null || echo "0")
                  fi
                  
                  # Count container SBOM packages
                  container_count="0"
                  buildkit_sbom_file="all-sboms/buildkit-sbom.spdx.json"
                  if [ -f "$buildkit_sbom_file" ]; then
                    container_count=$(cat "$buildkit_sbom_file" | jq -r '.packages | length' 2>/dev/null || echo "0")
                  fi
                  
                  # Determine status
                  if [ "$source_count" -gt 0 ] && [ "$container_count" -gt 0 ]; then
                    overall_status="‚úÖ Complete"
                  elif [ "$source_count" -gt 0 ] || [ "$container_count" -gt 0 ]; then
                    overall_status="üìã Partial"
                  else
                    overall_status="‚ö†Ô∏è  Minimal"
                  fi
                  
                  echo "| **$container** | $source_count packages | $container_count packages | Simple App | $overall_status |" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Process each container's detailed SBOM summary from the build step
            for summary_file in all-sboms/sbom-summary.txt; do
              if [ -f "$summary_file" ]; then
                echo "### ÔøΩ Detailed SBOM Analysis" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                cat "$summary_file" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
          else
            echo "No SBOM data available (likely due to test failures or non-main branch)." >> $GITHUB_STEP_SUMMARY
          fi
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Container package visibility information for main branch builds
        if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
          echo "## üì¶ Published Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following images were pushed to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in all-results/*.csv; do
            if [ -f "$file" ]; then
              IFS=',' read -r container dockerfile_path status_code response_body < "$file"
              if [ "$status_code" -eq 200 ]; then
                echo "- üì¶ \`ghcr.io/${{ github.repository_owner }}/$container:latest\`" >> $GITHUB_STEP_SUMMARY
                echo "- üì¶ \`ghcr.io/${{ github.repository_owner }}/$container:sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> üí° **Pull images:** \`docker pull ghcr.io/${{ github.repository_owner }}/IMAGE_NAME:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
