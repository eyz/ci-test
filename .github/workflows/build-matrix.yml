name: Build Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  packages: write
  contents: read
  attestations: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrixInclude: ${{ steps.gen.outputs.matrixInclude }}
    steps:
      - id: gen
        env:
          SERVICES: |
            hello-world-elixir:elixir/Dockerfile
            hello-world-go:go/Dockerfile
            hello-world-node:node/Dockerfile
            hello-world-python:python/Dockerfile
            hello-world-rust:rust/Dockerfile
        run: |
          # Convert the services to JSON array
          # jq pipeline explanation:
          # 1. -R -s: Read input as raw strings and treat as single string
          # 2. split("\n"): Split the multi-line string into array of lines
          # 3. map(select(length > 0)): Filter out empty lines
          # 4. map(gsub("^\\s+|\\s+$"; "")): Remove leading/trailing whitespace (strip equivalent)
          # 5. map(split(":")): Split each line on colon into [name, path] arrays
          # 6. map({...}): Transform each [name, path] into JSON object with containerName and dockerfilePath
          # 7. -c: Output compact JSON (single line, no formatting)
          JSON=$(echo "$SERVICES" | jq -R -s -c 'split("\n") | map(select(length > 0)) | map(gsub("^\\s+|\\s+$"; "")) | map(split(":")) | map({"containerName": .[0], "dockerfilePath": .[1]})')
          echo "matrixInclude=$JSON" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrixInclude) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        tags: |
          type=raw,value=latest
          type=sha

    - name: Build Docker image for testing
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfilePath }}
        platforms: linux/amd64
        push: false
        load: true  # Load image into local Docker daemon for testing
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Start container on port 8080
      run: |
        # Use the first tag from metadata for local testing (since image is loaded with tags, not digest)
        LOCAL_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        docker run -d --name ${{ matrix.containerName }}-container -p 8080:8080 "$LOCAL_TAG"

    - name: Wait for container to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8080/ > /dev/null 2>&1; do sleep 2; done' || true

    - name: Test endpoint with cURL
      run: |
        # Capture both response body and status code in one request
        response=$(curl -s -w "%{http_code}" http://localhost:8080/)

        # Parse response: last 3 characters are the status code, rest is body
        response_code="${response: -3}"
        response_body="${response%???}"

        # Get only the first line and strip newlines to prevent markdown table formatting issues
        response_body_clean=$(echo "$response_body" | head -n 1 | tr -d '\n\r')

        echo "HTTP response code: $response_code"
        echo "HTTP response body: $response_body_clean"

        # Store test results in artifacts for summary job
        mkdir -p test-results
        echo "${{ matrix.containerName }},${{ matrix.dockerfilePath }},$response_code,$response_body_clean" > test-results/${{ matrix.containerName }}.csv

        if [ "$response_code" -eq 200 ]; then
          echo "✅ Test passed: Received HTTP 200 from /"
          echo "TEST_PASSED=true" >> $GITHUB_ENV
        else
          echo "❌ Test failed: Expected HTTP 200, got $response_code"
          echo "TEST_PASSED=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Generate SBOM using Microsoft's official tool
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "📋 Generating SBOM with Microsoft's official sbom-tool..."
        
        # Download and install Microsoft's official sbom-tool
        curl -Lo sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
        chmod +x sbom-tool
        
        # Create output directory for SBOM
        mkdir -p sbom-output
        
        # Generate SBOM in SPDX 2.2 format (compatible with GitHub attestations)
        ./sbom-tool generate \
          -b . \
          -bc . \
          -pn "${{ matrix.containerName }}" \
          -pv "sha-${{ github.sha }}" \
          -ps "${{ github.repository_owner }}" \
          -nsb "https://github.com/${{ github.repository_owner }}" \
          -mi SPDX:2.2 \
          -m sbom-output
        
        # Copy the generated SBOM to expected location for attestation
        cp sbom-output/_manifest/spdx_2.2/manifest.spdx.json sbom.spdx.json
        
        echo "✅ SBOM generated successfully"

    - name: Build and push image with attestations
      id: build-push
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfilePath }}
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Add attestations for supply chain security
        provenance: true
        sbom: true

    - name: Generate attestations
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "🔐 Generating security attestations for ${{ matrix.containerName }}..."
        echo "   → Build provenance attestation"
        echo "   → SBOM attestation"
        echo "   (Individual attestation outputs suppressed - see combined summary)"

    - name: Generate GitHub artifact attestation
      id: build-attestation
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        subject-digest: ${{ steps.build-push.outputs.digest }}
        push-to-registry: true
        show-summary: false
      env:
        ACTIONS_STEP_DEBUG: false
        RUNNER_DEBUG: 0

    - name: Generate SBOM attestation
      id: sbom-attestation
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/attest-sbom@v2
      with:
        subject-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        subject-digest: ${{ steps.build-push.outputs.digest }}
        sbom-path: sbom.spdx.json
        push-to-registry: true
        show-summary: false
      env:
        ACTIONS_STEP_DEBUG: false
        RUNNER_DEBUG: 0

    - name: Store attestation results
      if: always() && env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "📝 Storing attestation results for summary..."
        mkdir -p attestation-results
        
        # Check if attestations were successful and capture URLs
        build_status="❌ Failed"
        sbom_status="❌ Failed"
        build_url=""
        sbom_url=""
        
        if [[ "${{ steps.build-attestation.outcome }}" == "success" ]]; then
          build_status="✅ Signed"
          build_url="${{ steps.build-attestation.outputs.attestation-url }}"
        fi
        
        if [[ "${{ steps.sbom-attestation.outcome }}" == "success" ]]; then
          sbom_status="✅ Signed"
          sbom_url="${{ steps.sbom-attestation.outputs.attestation-url }}"
        fi
        
        echo "${{ matrix.containerName }},${{ matrix.dockerfilePath }},${{ steps.build-push.outputs.digest }},$build_status,$sbom_status,$build_url,$sbom_url" > attestation-results/${{ matrix.containerName }}.csv
        echo "✅ Attestation results stored for ${{ matrix.containerName }}"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.containerName }}
        path: test-results/
        retention-days: 1

    - name: Upload attestation results
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: attestation-results-${{ matrix.containerName }}
        path: attestation-results/
        retention-days: 1

    - name: Cleanup container
      if: always()
      run: |
        docker stop ${{ matrix.containerName }}-container || true
        docker rm ${{ matrix.containerName }}-container || true

  summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        path: all-results
        merge-multiple: true

    - name: Download all attestation results
      uses: actions/download-artifact@v4
      with:
        pattern: attestation-results-*
        path: all-attestations
        merge-multiple: true

    - name: Create combined summary
      run: |
        echo "# 🚀 Container Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Container Name | Dockerfile Path | Status Code | Response Body | Test Result |" >> $GITHUB_STEP_SUMMARY
        echo "|----------------|-----------------|-------------|---------------|-------------|" >> $GITHUB_STEP_SUMMARY

        for file in all-results/*.csv; do
          if [ -f "$file" ]; then
            IFS=',' read -r container dockerfile_path status_code response_body < "$file"
            if [ "$status_code" -eq 200 ]; then
              result="✅ PASSED"
            else
              result="❌ FAILED"
            fi
            echo "| **$container** | \`$dockerfile_path\` | \`$status_code\` | \`$response_body\` | $result |" >> $GITHUB_STEP_SUMMARY
          fi
        done

        echo "" >> $GITHUB_STEP_SUMMARY

        # Add registry push information for main builds
        if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
          echo "## 📦 Published Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following images were pushed to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in all-results/*.csv; do
            if [ -f "$file" ]; then
              IFS=',' read -r container dockerfile_path status_code response_body < "$file"
              if [ "$status_code" -eq 200 ]; then
                echo "- 📦 \`ghcr.io/${{ github.repository_owner }}/$container:latest\`" >> $GITHUB_STEP_SUMMARY
                echo "- 📦 \`ghcr.io/${{ github.repository_owner }}/$container:sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> 💡 **Pull images:** \`docker pull ghcr.io/${{ github.repository_owner }}/IMAGE_NAME:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add comprehensive attestations summary
          echo "## 🔐 Security Attestations Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "all-attestations" ] && [ "$(ls -A all-attestations 2>/dev/null)" ]; then
            echo "| Container | Dockerfile | Image Digest | Build Provenance | SBOM Attestation | Verification |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|------------|-------------|------------------|------------------|--------------|" >> $GITHUB_STEP_SUMMARY
            
            for file in all-attestations/*.csv; do
              if [ -f "$file" ]; then
                IFS=',' read -r container dockerfile_path digest build_status sbom_status build_url sbom_url < "$file"
                short_digest="${digest#sha256:}"
                short_digest="${short_digest:0:12}"
                
                # Create hyperlinked status for build provenance
                if [[ "$build_status" == "✅ Signed" && -n "$build_url" ]]; then
                  build_display="[✅ Signed]($build_url)"
                else
                  build_display="$build_status"
                fi
                
                # Create hyperlinked status for SBOM
                if [[ "$sbom_status" == "✅ Signed" && -n "$sbom_url" ]]; then
                  sbom_display="[✅ Signed]($sbom_url)"
                else
                  sbom_display="$sbom_status"
                fi
                
                echo "| **$container** | \`$dockerfile_path\` | \`$short_digest...\` | $build_display | $sbom_display | \`gh attestation verify oci://ghcr.io/${{ github.repository_owner }}/$container:latest\` |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛡️ Attestation Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All published images include comprehensive supply chain security attestations:" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Provenance**: GitHub artifact attestations establishing build source and environment" >> $GITHUB_STEP_SUMMARY
            echo "- **SBOM**: Software Bill of Materials attestations in SPDX format" >> $GITHUB_STEP_SUMMARY
            echo "- **Docker Attestations**: Native Docker BuildKit provenance and SBOM" >> $GITHUB_STEP_SUMMARY
            echo "- **SLSA Compliance**: Meets SLSA v1.0 Build Level 2 requirements" >> $GITHUB_STEP_SUMMARY
          else
            echo "No attestations were generated (likely due to test failures or non-main branch)." >> $GITHUB_STEP_SUMMARY
          fi
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
