name: Build Matrix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  packages: write
  contents: read
  attestations: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrixInclude: ${{ steps.gen.outputs.matrixInclude }}
    steps:
      - id: gen
        env:
          SERVICES: |
            hello-world-elixir:elixir/Dockerfile
            hello-world-go:go/Dockerfile
            hello-world-node:node/Dockerfile
            hello-world-python:python/Dockerfile
            hello-world-rust:rust/Dockerfile
        run: |
          # Convert the services to JSON array
          # jq pipeline explanation:
          # 1. -R -s: Read input as raw strings and treat as single string
          # 2. split("\n"): Split the multi-line string into array of lines
          # 3. map(select(length > 0)): Filter out empty lines
          # 4. map(gsub("^\\s+|\\s+$"; "")): Remove leading/trailing whitespace (strip equivalent)
          # 5. map(split(":")): Split each line on colon into [name, path] arrays
          # 6. map({...}): Transform each [name, path] into JSON object with containerName and dockerfilePath
          # 7. -c: Output compact JSON (single line, no formatting)
          JSON=$(echo "$SERVICES" | jq -R -s -c 'split("\n") | map(select(length > 0)) | map(gsub("^\\s+|\\s+$"; "")) | map(split(":")) | map({"containerName": .[0], "dockerfilePath": .[1]})')
          echo "matrixInclude=$JSON" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.matrixInclude) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        tags: |
          type=raw,value=latest
          type=sha

    - name: Build Docker image for testing
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfilePath }}
        platforms: linux/amd64
        push: false
        load: true  # Load image into local Docker daemon for testing
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Start container on port 8080
      run: |
        # Use the first tag from metadata for local testing (since image is loaded with tags, not digest)
        LOCAL_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        docker run -d --name ${{ matrix.containerName }}-container -p 8080:8080 "$LOCAL_TAG"

    - name: Wait for container to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:8080/ > /dev/null 2>&1; do sleep 2; done' || true

    - name: Test endpoint with cURL
      run: |
        # Capture both response body and status code in one request
        response=$(curl -s -w "%{http_code}" http://localhost:8080/)

        # Parse response: last 3 characters are the status code, rest is body
        response_code="${response: -3}"
        response_body="${response%???}"

        # Get only the first line and strip newlines to prevent markdown table formatting issues
        response_body_clean=$(echo "$response_body" | head -n 1 | tr -d '\n\r')

        echo "HTTP response code: $response_code"
        echo "HTTP response body: $response_body_clean"

        # Store test results in artifacts for summary job
        mkdir -p test-results
        echo "${{ matrix.containerName }},${{ matrix.dockerfilePath }},$response_code,$response_body_clean" > test-results/${{ matrix.containerName }}.csv

        if [ "$response_code" -eq 200 ]; then
          echo "✅ Test passed: Received HTTP 200 from /"
          echo "TEST_PASSED=true" >> $GITHUB_ENV
        else
          echo "❌ Test failed: Expected HTTP 200, got $response_code"
          echo "TEST_PASSED=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Generate comprehensive SBOMs (Microsoft sbom-tool + BuildKit)
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "📋 Generating comprehensive SBOMs with multiple tools..."
        
        # Install required tools
        echo "🔧 Installing tools..."
        
        # Install yq for JSON to YAML conversion
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        # Download and install Microsoft's official sbom-tool
        curl -Lo sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
        chmod +x sbom-tool
        
        # Create output directories
        mkdir -p sbom-output sbom-buildkit sbom-yaml
        
        # Extract the directory path from the dockerfile path for targeted scanning
        DOCKERFILE_DIR=$(dirname "${{ matrix.dockerfilePath }}")
        
        echo "🔍 Generating Microsoft SBOM for $DOCKERFILE_DIR..."
        
        # Generate SBOM in SPDX 2.2 format, scanning only the relevant directory
        ./sbom-tool generate \
          -b "$DOCKERFILE_DIR" \
          -bc "$DOCKERFILE_DIR" \
          -pn "${{ matrix.containerName }}" \
          -pv "sha-${{ github.sha }}" \
          -ps "${{ github.repository_owner }}" \
          -nsb "https://github.com/${{ github.repository_owner }}" \
          -mi SPDX:2.2 \
          -m sbom-output \
          -V Warning || {
            echo "⚠️  SBOM generation completed with warnings or no packages detected"
            echo "   This is normal for simple applications without external dependencies"
            # Ensure the SBOM file exists even if minimal
            if [ ! -f "sbom-output/_manifest/spdx_2.2/manifest.spdx.json" ]; then
              echo "📝 Creating minimal SBOM as fallback..."
              mkdir -p sbom-output/_manifest/spdx_2.2
              cat > sbom-output/_manifest/spdx_2.2/manifest.spdx.json << EOF
        {
          "spdxVersion": "SPDX-2.2",
          "dataLicense": "CC0-1.0",
          "SPDXID": "SPDXRef-DOCUMENT",
          "name": "${{ matrix.containerName }}",
          "documentNamespace": "https://github.com/${{ github.repository_owner }}/${{ matrix.containerName }}/sha-${{ github.sha }}",
          "creationInfo": {
            "created": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "creators": ["Tool: Microsoft.Sbom.Tool", "Organization: ${{ github.repository_owner }}"]
          },
          "packages": [],
          "relationships": []
        }
        EOF
            fi
          }
        
        # Copy the generated SBOM to expected location for attestation
        cp sbom-output/_manifest/spdx_2.2/manifest.spdx.json sbom.spdx.json
        
        echo "✅ Microsoft SBOM generated successfully"
        
        # Extract BuildKit SBOM from the built image and all layers
        echo "🐳 Extracting BuildKit SBOM from container image and layers..."
        LOCAL_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        
        # Try to extract BuildKit SBOM using buildx imagetools
        docker buildx imagetools inspect "$LOCAL_TAG" --format '{{ json .SBOM }}' > sbom-buildkit/buildkit-sbom.json 2>/dev/null || {
          echo "⚠️  BuildKit SBOM not found in image metadata, creating placeholder"
          echo '{"note": "No BuildKit SBOM available for this image", "reason": "BuildKit SBOM generation may not be enabled"}' > sbom-buildkit/buildkit-sbom.json
        }
        
        # Extract manifest to analyze layers
        echo "🔍 Analyzing container layers..."
        docker manifest inspect "$LOCAL_TAG" > sbom-buildkit/manifest.json 2>/dev/null || {
          echo "⚠️  Could not extract manifest"
          echo '{"note": "Manifest not available"}' > sbom-buildkit/manifest.json
        }
        
        # Try to extract layer information and potential SBOMs from each layer
        echo "📊 Extracting layer-specific information..."
        docker inspect "$LOCAL_TAG" > sbom-buildkit/image-inspect.json 2>/dev/null || {
          echo '{"note": "Image inspection not available"}' > sbom-buildkit/image-inspect.json
        }
        
        # Try to get BuildKit provenance and SBOM attestations directly
        echo "🔍 Checking for BuildKit attestations..."
        docker buildx imagetools inspect "$LOCAL_TAG" --format '{{ json .Provenance }}' > sbom-buildkit/buildkit-provenance.json 2>/dev/null || {
          echo '{"note": "No BuildKit provenance available"}' > sbom-buildkit/buildkit-provenance.json
        }
        
        # Convert all JSON SBOMs to YAML
        echo "🔄 Converting SBOMs from JSON to YAML..."
        
        # Convert Microsoft SBOM to YAML
        yq eval '.' sbom.spdx.json > sbom-yaml/microsoft-sbom.yaml
        
        # Convert BuildKit SBOM to YAML
        yq eval '.' sbom-buildkit/buildkit-sbom.json > sbom-yaml/buildkit-sbom.yaml
        
        # Convert manifest to YAML
        yq eval '.' sbom-buildkit/manifest.json > sbom-yaml/manifest.yaml
        
        # Convert image inspection to YAML
        yq eval '.' sbom-buildkit/image-inspect.json > sbom-yaml/image-inspect.yaml
        
        # Convert provenance to YAML
        yq eval '.' sbom-buildkit/buildkit-provenance.json > sbom-yaml/buildkit-provenance.yaml
        
        echo "✅ All SBOMs converted to YAML format"
        
        # Create a summary of findings for the summary step
        echo "📝 Creating SBOM summary..."
        echo "SBOM Analysis Summary for ${{ matrix.containerName }}" > sbom-summary.txt
        echo "" >> sbom-summary.txt
        echo "Microsoft SBOM Tool Results:" >> sbom-summary.txt
        if [ -s "sbom.spdx.json" ]; then
          echo "✅ Microsoft SBOM generated successfully" >> sbom-summary.txt
          PACKAGE_COUNT=$(cat sbom.spdx.json | jq -r '.packages | length' 2>/dev/null || echo "unknown")
          echo "📦 Found $PACKAGE_COUNT packages" >> sbom-summary.txt
        else
          echo "❌ Microsoft SBOM generation failed" >> sbom-summary.txt
        fi
        echo "" >> sbom-summary.txt
        echo "BuildKit SBOM Results:" >> sbom-summary.txt
        if grep -q '"note"' sbom-buildkit/buildkit-sbom.json 2>/dev/null; then
          echo "⚠️  BuildKit SBOM not available" >> sbom-summary.txt
        else
          echo "✅ BuildKit SBOM extracted" >> sbom-summary.txt
        fi
        echo "" >> sbom-summary.txt
        echo "Container Layer Analysis:" >> sbom-summary.txt
        LAYER_COUNT=$(docker manifest inspect "$LOCAL_TAG" 2>/dev/null | jq -r '.layers | length' || echo "unknown")
        echo "🗂️  Container has $LAYER_COUNT layers" >> sbom-summary.txt
        
        echo "✅ SBOM generation and analysis completed"

    - name: Build and push image with attestations
      id: build-push
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfilePath }}
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Add attestations for supply chain security
        provenance: true
        sbom: true

    - name: Generate attestations
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "🔐 Generating security attestations for ${{ matrix.containerName }}..."
        echo "   → Build provenance attestation"
        echo "   → SBOM attestation"
        echo "   (Individual attestation outputs suppressed - see combined summary)"

    - name: Generate GitHub artifact attestation
      id: build-attestation
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        subject-digest: ${{ steps.build-push.outputs.digest }}
        push-to-registry: true
        show-summary: false
      env:
        ACTIONS_STEP_DEBUG: false
        RUNNER_DEBUG: 0

    - name: Generate SBOM attestation
      id: sbom-attestation
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/attest-sbom@v2
      with:
        subject-name: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}
        subject-digest: ${{ steps.build-push.outputs.digest }}
        sbom-path: sbom.spdx.json
        push-to-registry: true
        show-summary: false
      env:
        ACTIONS_STEP_DEBUG: false
        RUNNER_DEBUG: 0

    - name: Store attestation results
      if: always() && env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "📝 Storing attestation results for summary..."
        mkdir -p attestation-results
        
        # Check if attestations were successful and capture URLs
        build_status="❌ Failed"
        sbom_status="❌ Failed"
        build_url=""
        sbom_url=""
        
        if [[ "${{ steps.build-attestation.outcome }}" == "success" ]]; then
          build_status="✅ Signed"
          build_url="${{ steps.build-attestation.outputs.attestation-url }}"
        fi
        
        if [[ "${{ steps.sbom-attestation.outcome }}" == "success" ]]; then
          sbom_status="✅ Signed"
          sbom_url="${{ steps.sbom-attestation.outputs.attestation-url }}"
        fi
        
        echo "${{ matrix.containerName }},${{ matrix.dockerfilePath }},${{ steps.build-push.outputs.digest }},$build_status,$sbom_status,$build_url,$sbom_url" > attestation-results/${{ matrix.containerName }}.csv
        echo "✅ Attestation results stored for ${{ matrix.containerName }}"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.containerName }}
        path: test-results/
        retention-days: 1

    - name: Upload attestation results
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: attestation-results-${{ matrix.containerName }}
        path: attestation-results/
        retention-days: 1

    - name: Upload SBOM artifacts
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files-${{ matrix.containerName }}
        path: |
          sbom-yaml/
          sbom-buildkit/
          sbom-summary.txt
        retention-days: 30

    - name: Package visibility information
      if: env.TEST_PASSED == 'true' && github.ref == 'refs/heads/main'
      run: |
        echo "📦 Container package published: ghcr.io/${{ github.repository_owner }}/${{ matrix.containerName }}"
        echo "🔒 Package is currently private by default"
        echo ""
        echo "To make it public:"
        echo "1. Go to https://github.com/${{ github.repository_owner }}?tab=packages"
        echo "2. Click on '${{ matrix.containerName }}' package"
        echo "3. Go to Package settings (⚙️) → Change visibility → Public"
        echo ""
        echo "Or use the GitHub CLI:"
        echo "gh api -X PATCH /user/packages/container/${{ matrix.containerName }} -f visibility=public"

    - name: Cleanup container
      if: always()
      run: |
        docker stop ${{ matrix.containerName }}-container || true
        docker rm ${{ matrix.containerName }}-container || true

  summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        path: all-results
        merge-multiple: true

    - name: Download all attestation results
      uses: actions/download-artifact@v4
      with:
        pattern: attestation-results-*
        path: all-attestations
        merge-multiple: true

    - name: Download all SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: sbom-files-*
        path: all-sboms
        merge-multiple: true

    - name: Create combined summary
      run: |
        echo "# 🚀 Container Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Container Name | Dockerfile Path | Status Code | Response Body | Test Result |" >> $GITHUB_STEP_SUMMARY
        echo "|----------------|-----------------|-------------|---------------|-------------|" >> $GITHUB_STEP_SUMMARY

        for file in all-results/*.csv; do
          if [ -f "$file" ]; then
            IFS=',' read -r container dockerfile_path status_code response_body < "$file"
            if [ "$status_code" -eq 200 ]; then
              result="✅ PASSED"
            else
              result="❌ FAILED"
            fi
            echo "| **$container** | \`$dockerfile_path\` | \`$status_code\` | \`$response_body\` | $result |" >> $GITHUB_STEP_SUMMARY
          fi
        done

        echo "" >> $GITHUB_STEP_SUMMARY

        # Add registry push information for main builds
        if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
          echo "## 📦 Published Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following images were pushed to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in all-results/*.csv; do
            if [ -f "$file" ]; then
              IFS=',' read -r container dockerfile_path status_code response_body < "$file"
              if [ "$status_code" -eq 200 ]; then
                echo "- 📦 \`ghcr.io/${{ github.repository_owner }}/$container:latest\`" >> $GITHUB_STEP_SUMMARY
                echo "- 📦 \`ghcr.io/${{ github.repository_owner }}/$container:sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> 💡 **Pull images:** \`docker pull ghcr.io/${{ github.repository_owner }}/IMAGE_NAME:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add comprehensive attestations summary
          echo "## 🔐 Security Attestations Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "all-attestations" ] && [ "$(ls -A all-attestations 2>/dev/null)" ]; then
            echo "| Container | Dockerfile | Image Digest | Build Provenance | SBOM Attestation | Verification |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|------------|-------------|------------------|------------------|--------------|" >> $GITHUB_STEP_SUMMARY
            
            for file in all-attestations/*.csv; do
              if [ -f "$file" ]; then
                IFS=',' read -r container dockerfile_path digest build_status sbom_status build_url sbom_url < "$file"
                short_digest="${digest#sha256:}"
                short_digest="${short_digest:0:12}"
                
                # Create hyperlinked status for build provenance
                if [[ "$build_status" == "✅ Signed" && -n "$build_url" ]]; then
                  build_display="[✅ Signed]($build_url)"
                else
                  build_display="$build_status"
                fi
                
                # Create hyperlinked status for SBOM
                if [[ "$sbom_status" == "✅ Signed" && -n "$sbom_url" ]]; then
                  sbom_display="[✅ Signed]($sbom_url)"
                else
                  sbom_display="$sbom_status"
                fi
                
                echo "| **$container** | \`$dockerfile_path\` | \`$short_digest...\` | $build_display | $sbom_display | \`gh attestation verify oci://ghcr.io/${{ github.repository_owner }}/$container:latest\` |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛡️ Attestation Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All published images include comprehensive supply chain security attestations:" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Provenance**: GitHub artifact attestations establishing build source and environment" >> $GITHUB_STEP_SUMMARY
            echo "- **SBOM**: Software Bill of Materials attestations in SPDX format" >> $GITHUB_STEP_SUMMARY
            echo "- **Docker Attestations**: Native Docker BuildKit provenance and SBOM" >> $GITHUB_STEP_SUMMARY
            echo "- **SLSA Compliance**: Meets SLSA v1.0 Build Level 2 requirements" >> $GITHUB_STEP_SUMMARY
          else
            echo "No attestations were generated (likely due to test failures or non-main branch)." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add comprehensive SBOM analysis
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Software Bill of Materials (SBOM) Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "all-sboms" ] && [ "$(ls -A all-sboms 2>/dev/null)" ]; then
            echo "Comprehensive SBOM analysis using multiple tools and formats:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Process each container's SBOM data
            for summary_file in all-sboms/sbom-summary.txt; do
              if [ -f "$summary_file" ]; then
                echo "### 📊 SBOM Summary" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                cat "$summary_file" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # Display Microsoft SBOM in YAML format
            echo "### 🔧 Microsoft SBOM Tool Results (YAML)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            for yaml_file in all-sboms/sbom-yaml/microsoft-sbom.yaml; do
              if [ -f "$yaml_file" ]; then
                echo "<details>" >> $GITHUB_STEP_SUMMARY
                echo "<summary>📋 Click to expand Microsoft SBOM (YAML format)</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
                cat "$yaml_file" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              else
                echo "No Microsoft SBOM data available." >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # Display BuildKit SBOM in YAML format
            echo "### 🐳 BuildKit SBOM Results (YAML)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            for buildkit_file in all-sboms/sbom-yaml/buildkit-sbom.yaml; do
              if [ -f "$buildkit_file" ]; then
                echo "<details>" >> $GITHUB_STEP_SUMMARY
                echo "<summary>🐳 Click to expand BuildKit SBOM (YAML format)</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
                cat "$buildkit_file" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              else
                echo "No BuildKit SBOM data available." >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # Display Container Manifest Analysis
            echo "### 🗂️ Container Layer Analysis (YAML)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            for manifest_file in all-sboms/sbom-yaml/manifest.yaml; do
              if [ -f "$manifest_file" ]; then
                echo "<details>" >> $GITHUB_STEP_SUMMARY
                echo "<summary>🗂️ Click to expand Container Manifest (YAML format)</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
                cat "$manifest_file" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              else
                echo "No container manifest data available." >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            # Display BuildKit Provenance
            echo "### 🔍 BuildKit Provenance Analysis (YAML)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            for provenance_file in all-sboms/sbom-yaml/buildkit-provenance.yaml; do
              if [ -f "$provenance_file" ]; then
                echo "<details>" >> $GITHUB_STEP_SUMMARY
                echo "<summary>🔍 Click to expand BuildKit Provenance (YAML format)</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
                cat "$provenance_file" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              else
                echo "No BuildKit provenance data available." >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
          else
            echo "No SBOM data available (likely due to test failures or non-main branch)." >> $GITHUB_STEP_SUMMARY
          fi
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Container package visibility information for main branch builds
        if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
          echo "## 📦 Published Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following images were pushed to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in all-results/*.csv; do
            if [ -f "$file" ]; then
              IFS=',' read -r container dockerfile_path status_code response_body < "$file"
              if [ "$status_code" -eq 200 ]; then
                echo "- 📦 \`ghcr.io/${{ github.repository_owner }}/$container:latest\`" >> $GITHUB_STEP_SUMMARY
                echo "- 📦 \`ghcr.io/${{ github.repository_owner }}/$container:sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔒 Making Packages Public" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Container packages are **private by default**. To make them public:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Option 1: Via GitHub Web Interface**" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [Your Packages](https://github.com/${{ github.repository_owner }}?tab=packages)" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on a package name" >> $GITHUB_STEP_SUMMARY
          echo "3. Go to Package settings ⚙️ → Change visibility → Public" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Option 2: Via GitHub CLI**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "gh api -X PATCH /user/packages/container/PACKAGE_NAME -f visibility=public" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Then you can pull images:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ github.repository_owner }}/hello-world-go:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
